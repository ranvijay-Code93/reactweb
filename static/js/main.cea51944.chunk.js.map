{"version":3,"sources":["webcamCheck.jsx","images.js","App.js","serviceWorker.js","index.js"],"names":["ComposedComponent","images","id","image","App","className","map","data","src","alt","key","this","renderImage","Component","NetworkDetector","state","isDisconnected","handleConnectionChange","navigator","getUserMedia","setState","webPing","setInterval","fetch","then","clearInterval","catch","window","addEventListener","removeEventListener","props","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"kKAEwBA,E,2ECiCTC,G,MAnCA,CACb,CACEC,GAAI,EACJC,MAAO,yCAET,CACED,GAAI,EACJC,MAAO,yCAET,CACED,GAAI,EACJC,MAAO,yCAET,CACED,GAAI,EACJC,MAAO,yCAET,CACED,GAAI,EACJC,MAAO,yCAET,CACED,GAAI,EACJC,MAAO,yCAET,CACED,GAAI,EACJC,MAAO,yCAET,CACED,GAAI,EACJC,MAAO,2C,gBC1BLC,E,sLAEF,OACE,yBAAKC,UAAU,cACZJ,EAAOK,KAAI,SAAAC,GAAI,OACd,yBAAKC,IAAKD,EAAKJ,MAAOM,IAAI,SAASC,IAAKH,EAAKL,GAAIG,UAAU,gB,+BAMjE,OACE,yBAAKA,UAAU,OACb,uBAAGA,UAAU,cAAb,qBACCM,KAAKC,mB,GAdIC,aAoBHC,GFvBSd,EEuBOI,EFvBY,2MAEvCW,MAAQ,CACNC,gBAAgB,GAHqB,EAiBvCC,uBAAyB,WAEvB,GAAkB,YADAC,UAAUC,aAAe,SAAW,WActD,OAAO,EAAKC,SAAS,CAAEJ,gBAAgB,IAZrC,IAAMK,EAAUC,aAAY,WAC1BC,MAAM,kBAAC,IAAD,OACHC,MAAK,WACJ,EAAKJ,SAAS,CAAEJ,gBAAgB,IAAS,WACvC,OAAOS,cAAcJ,SAGxBK,OAAM,kBAAM,EAAKN,SAAS,CAAEJ,gBAAgB,SAC9C,MA5BgC,mFAOrCL,KAAKM,yBACLU,OAAOC,iBAAiB,SAAUjB,KAAKM,wBACvCU,OAAOC,iBAAiB,UAAWjB,KAAKM,0BATH,6CAarCU,OAAOE,oBAAoB,SAAUlB,KAAKM,wBAC1CU,OAAOE,oBAAoB,UAAWlB,KAAKM,0BAdN,+BAmC7B,IACAD,EAAmBL,KAAKI,MAAxBC,eACR,OACE,6BACGA,GACC,yBAAKX,UAAU,kBACb,wDAGJ,kBAACL,EAAsBW,KAAKmB,YA5CK,GACXjB,cGSZkB,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBpB,WACrBA,UAAUqB,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.cea51944.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nexport default function(ComposedComponent) {\r\n  class NetworkDetector extends Component {\r\n    state = {\r\n      isDisconnected: false\r\n    };\r\n\r\n    componentDidMount() {\r\n      this.handleConnectionChange();\r\n      window.addEventListener(\"online\", this.handleConnectionChange);\r\n      window.addEventListener(\"offline\", this.handleConnectionChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      window.removeEventListener(\"online\", this.handleConnectionChange);\r\n      window.removeEventListener(\"offline\", this.handleConnectionChange);\r\n    }\r\n\r\n    handleConnectionChange = () => {\r\n      const condition = navigator.getUserMedia ? \"online\" : \"offline\";\r\n      if (condition === \"online\") {\r\n        const webPing = setInterval(() => {\r\n          fetch(<Webcam />)\r\n            .then(() => {\r\n              this.setState({ isDisconnected: false }, () => {\r\n                return clearInterval(webPing);\r\n              });\r\n            })\r\n            .catch(() => this.setState({ isDisconnected: true }));\r\n        }, 2000);\r\n        return;\r\n      }\r\n\r\n      return this.setState({ isDisconnected: true });\r\n    };\r\n\r\n    render() {\r\n      const { isDisconnected } = this.state;\r\n      return (\r\n        <div>\r\n          {isDisconnected && (\r\n            <div className=\"internet-error\">\r\n              <p>Internet connection lost</p>\r\n            </div>\r\n          )}\r\n          <ComposedComponent {...this.props} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return NetworkDetector;\r\n}\r\n","const images = [\r\n  {\r\n    id: 1,\r\n    image: \"https://picsum.photos/200/300/?random\"\r\n  },\r\n  {\r\n    id: 2,\r\n    image: \"https://picsum.photos/250/300/?random\"\r\n  },\r\n  {\r\n    id: 3,\r\n    image: \"https://picsum.photos/210/300/?random\"\r\n  },\r\n  {\r\n    id: 4,\r\n    image: \"https://picsum.photos/240/300/?random\"\r\n  },\r\n  {\r\n    id: 5,\r\n    image: \"https://picsum.photos/260/300/?random\"\r\n  },\r\n  {\r\n    id: 6,\r\n    image: \"https://picsum.photos/260/300/?random\"\r\n  },\r\n  {\r\n    id: 7,\r\n    image: \"https://picsum.photos/250/300/?random\"\r\n  },\r\n  {\r\n    id: 8,\r\n    image: \"https://picsum.photos/260/300/?random\"\r\n  }\r\n];\r\n\r\nexport default images;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport images from \"./images\";\nimport NetworkDetector from \"./webcamCheck\";\n\nclass App extends Component {\n  renderImage() {\n    return (\n      <div className=\"image-list\">\n        {images.map(data => (\n          <img src={data.image} alt=\"random\" key={data.id} className=\"image\" />\n        ))}\n      </div>\n    );\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <p className=\"page-title\">The iDrag Imagery</p>\n        {this.renderImage()}\n      </div>\n    );\n  }\n}\n\nexport default NetworkDetector(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}